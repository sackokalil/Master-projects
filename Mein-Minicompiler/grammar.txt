expr    : term ((PLUS|MINUS) term)*									z.B : (2+4X)*25 + 365

term    : factor ((MUL|DIV) factor)*								z.B : (2+4X)*25

factor	: (PLUS|MINUS) factor										z.B : -(2+4X)
				: power

power		: atom (POW factor)*									z.B : (2+4X)^2

atom 		: INT|FLOAT
			: LPAREN expr RPAREN






GEGEBEN SEI DER AUSDRUCK(EXPRESSION):  4+100*8/(-(2+3)^2)

Um diesen AUSDRUCK zu berechnen, muss man beispielsweise die REIHENFOLGE DER OPERATOREN berücksichtigen.
In diesem AUSDRUCK ist ATOM[(2+3)] am prioritärsten, gefolgt von POWER[(2+3)^2], dann FACTOR[-(2+3)^2], 
anschließend TERM[1008/(-(2+3)^2)], und schließlich der AUSDRUCK [4+1008/(-(2+3)^2)].



GEGEBEN SEI DIE EXPRESSION (1+3) * 56 - 9

##################################################################################
##          WIE SIEHT DIE TOKENLISTE NACH DER TOKENIZATION AUS                  ##
##################################################################################

[TT_LPAREN, TT_INT:1, TT_PLUS, TT_INT:3, TT_RPAREN, TT_MUL, TT_INT:56, TT_MINUS, TT_INT:9, TT_EOF]




#################################################################################
##    WIE SIEHT DIE STRUKTUR  DES RESULTATS DES PARSING NACH DEM PARSING:      ##
##    FÛR EINE EXPRESSION WIE : (1+3)*56-9                                     ##
#################################################################################

Nach dem PARSING, dessen Resultat beinhaltet eine Liste von Knoten: 

[BinOpNode, BinOpNode, BinOpNode,NumberNode, NumberNode, NumberNode, NumberNode ]


  BinOpNode(für (1+3) * 56 - 9)
    |
    ---- BinOpNode(für (1+3) * 56)
           |
           ---- BinOpNode(für 1+3)
                  |
                  ---- NumberNode(für 1)
                  |
                  ---- NumberNode(für 3)
           |
           ---- NumberNode(für 56)
    |
    ---- NumberNode(für 9)

###################################################################################
##     DIE REPRÄSENTATION OBENSTEHENDER STRUKTUR SIEHT UNTENSTEHENDES AUS         ##
###################################################################################

(((TT_INT:1, TT_PLUS, TT_INT:3), TT_MUL, TT_INT:56), TT_MINUS, TT_INT:9)



TACHE A FAIRE:
Comment écrire un code en python permettant d'afficher l'AST
L'expression à demontré lors de la presentation: 2*5+25-(3-5)*2-(25+15);  -2*56*(25+3)-(2*3)*2-6^2;
 2*56*(25+3)-(2*3)*2-6^2 ; 
Nb: exemple d'erreur: Rentimeerror( 2*56*(25+3)-(2*3)*2-6^2/0; 2*56/(2*3+2-8) ), invalidsyntaxerror(2+(3*(52-10*3))25), illegalcharerror(2*(52-10*3)$25).
la lecture des fichier.
Commenter le programme
detailler comment l'instruction intermediaire pour le contenu de exemple_expression est generée
chercher à savoir comment les erreur marchent
revoir how_it_works
